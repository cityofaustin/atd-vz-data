#!env python

import argparse
import subprocess
import os
import shtab
from datetime import date
import pprint
from dotenv import load_dotenv

load_dotenv()


def doCommand(args):
    if args.command == "build":
        buildTools()
    elif args.command == "db-up":
        dbUp()
    elif args.command == "psql":
        psql()
    elif args.command == "graphql-engine-up":
        dbUp()
        graphqlEngineUp()
    elif args.command == 'graphql-engine-down':
        pass        
    elif args.command == "tools-shell":
        dbUp()
        toolsShell()
    elif args.command == "stop":
        stop()
    elif args.command == "replicate-db":
        dbUp()
        replicateDb(args.include_change_log_data)
    elif args.command == "remove-snapshots":
        removeSnapshots()

## function to list the files in a directory and delete them
def removeSnapshots():
    print("üóëÔ∏è  Removing snapshots")
    subprocess.run(["rm", "-rf", "atd-vzd/snapshots/*.sql"])

def replicateDb(includeChangeLogData = False):
    # print(tool_runner_command + replicate_command)
    today = date.today().strftime("%Y-%m-%d")
    snapshotFilename = "visionzero_" + today + ".sql"
    snapshotFQP = "atd-vzd/snapshots/" + snapshotFilename

    # fmt: off
    replicate_runner_command = [
        "docker-compose",
        "run",
        "--rm",
        "-e", "PGHOST=" + os.environ["RR_HOSTNAME"],
        "-e", "PGDATABASE=" + os.environ["RR_DATABASE"],
        "-e", "PGUSER=" + os.environ["RR_USERNAME"],
        "-e", "PGPASSWORD=" + os.environ["RR_PASSWORD"],
        "db-tools",
    ]

    replicate_command = [
        "pg_dump",
        "--clean",
        "--create",
        "--no-owner",
        "--no-privileges",
        "--if-exists",
        #"--table", "atd_txdot__airbag_lkp",
        #"-t", "atd_txdot_crashes",
    ]
    if not includeChangeLogData:
        replicate_command.append("--exclude-table-data")
        replicate_command.append("atd_txdot_change_log")

    postgres_db_runner_command = [
        "docker-compose",
        "run",
        "--rm",
        "-e", "PGHOST=" + 'postgis',
        "-e", "PGUSER=" + os.environ["POSTGRES_USER"],
        "-e", "PGPASSWORD=" + os.environ["POSTGRES_PASSWORD"],
        "-e", "PGDATABASE=postgres",
        "db-tools",
    ]
    
    populate_runner_command = [
        "docker-compose",
        "run",
        "--rm",
        "-e", "PGHOST=" + 'postgis',
        "-e", "PGUSER=" + os.environ["POSTGRES_USER"],
        "-e", "PGPASSWORD=" + os.environ["POSTGRES_PASSWORD"],
        "-e", "PGDATABASE=postgres",
        "db-tools",
    ]
    # fmt: on

    if not (os.path.exists(snapshotFQP)):
        print("Ô∏èüóÑ  Downloading remote database")
        if includeChangeLogData:
            print("This will take a while, on the order of half an hour.")
        else:
            print("This can take up to 15 minutes.")
        print(replicate_command)
        snapshot = open(snapshotFQP, "w")
        subprocess.run(replicate_runner_command + replicate_command, stdout=snapshot)
        snapshot.close()

    drop_database_command = [
        "psql", "drop", "database", os.environ["POSTGRES_DB"]
    ]

    print("Ô∏èüíæ Dropping the local database")
    print(" ".join(postgres_db_runner_command))
    print(" ".join(drop_database_command))
    #subprocess.run(postgres_db_runner_command + drop_database_command)

    populate_command = [
        "psql",
        "-f", "/snapshots/" + snapshotFilename
    ]

    #print("Ô∏èüíæ Loading the database with snapshot")
    #print(populate_command)
    #subprocess.run(populate_runner_command + populate_command)


def psql():
    # fmt: off
    db_tools_runner_command = [
        "docker-compose",
        "run",
        "--rm",
        "-e", "PGHOST=postgis",
        "-e", "PGDATABASE=" + os.environ["POSTGRES_DB"],
        "-e", "PGUSER=" + os.environ["POSTGRES_USER"],
        "-e", "PGPASSWORD=" + os.environ["POSTGRES_PASSWORD"],
        "db-tools",
    ]
    # fmt: on

    print("üì∫  Starting psql")
    subprocess.run(db_tools_runner_command + ["psql"])


def buildTools():
    print("üõ†Ô∏è  Rebuilding images with --no-cache")
    subprocess.run(["docker-compose", "build", "--no-cache"])


def dbUp():
    print("üõ¢Ô∏è  Starting database")
    subprocess.run(["docker-compose", "up", "-d", "postgis"])
    subprocess.run(["docker", "ps"])


def graphqlEngineUp():
    print("üöÄ  Starting GraphQL Engine")
    subprocess.run(["docker-compose", "up", "-d", "graphql-engine"])
    subprocess.run(["docker", "ps"])


def toolsShell():
    print("üêö  Starting tools shell")

    # fmt: off
    tool_runner_command = [
        "docker-compose",
        "run",
        "--rm",
        "-e", "PGHOST=" + "postgis",
        "-e", "PGUSER=" + os.environ["POSTGRES_USER"],
        "-e", "PGPASSWORD=" + os.environ["POSTGRES_PASSWORD"],
        "-e", "PGDATABASE=" + os.environ["POSTGRES_DB"],
        "db-tools",
    ]
    # fmt: on

    shell_command = ["bash"]
    subprocess.run(tool_runner_command + shell_command)


def stop():
    print("üõë  Stopping containers")
    subprocess.run(["docker-compose", "stop"])

def get_main_parser():
    parser = argparse.ArgumentParser(prog="vision-zero")
    # ü™Ñ generate a autocompletion script for the shell
    shtab.add_argument_to(parser, ["-s", "--print-completion"])
    shtab.add_argument_to(parser, ["-c", "--include-change-log-data"])
    parser.add_argument(
        "command",
        choices=[
            "build",
            "db-up",
            "graphql-engine-up",
            "stop",
            "psql",
            "tools-shell",
            "replicate-db",
            "remove-snapshots",
        ],
    )
    return parser


if __name__ == "__main__":
    parser = get_main_parser()
    args = parser.parse_args()
    doCommand(args)
